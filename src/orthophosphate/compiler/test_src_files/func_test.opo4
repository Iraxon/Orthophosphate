func test
{
    /* This is code that is ripped straight out of one of my datapacks, with
    just the namespace changed. Consider it a case study of why
    we want to have concise scoreboard statements. */

    /* Since the insertion of the above comment, we now have said concise statements.
    This file also contains an implementation using those.*/

    |scoreboard objectives add ...constants dummy|; // Ellipsis macro works inside literals as well
    |scoreboard players set C3 ...constants 3|;
    |scoreboard players set C20 ...constants 20|;
    |scoreboard players set C24000 ...constants 24000|;

    |scoreboard objectives add ...tickers dummy|;

    |scoreboard players add $T20 ...tickers 1|; # 1 cycle per second
    |scoreboard players operation $T20 ...tickers %= C20 ...constants|;

    |scoreboard players add $T3 ...tickers 1|; # Irregular ticker for pseudo-random operations
    |scoreboard players operation $T20 ...tickers %= C3 ...constants|;

    |scoreboard players add $T24000 ...tickers 1|; # 1 cycle per MC Day
    |scoreboard players operation $T24000 ...tickers %= C24000 ...constants|;
}

func concise_test
{
    /* Remember that most real datapacks won't
    have a name as long as "my_very_cool_datapack" */

    obj ...tickers;

    score $T20 ...tickers += constant 1;
    score $T20 ...tickers %= constant 20;

    score $T3 ...tickers += constant 1;
    score $T3 ...tickers %= constant 3;

    score $T24000 ...tickers += constant 1;
    score $T24000 ...tickers %= constant 24000;
}

/*
func var_test
{
    /* This function uses the higher-level variable construct
    instead of scoreboard manipulation. It does not do the same
    thing as the others.*--------/

    int a = 2;
    a += 3;
    a %= 4;
    a = 10 + 2 ** 2 * 5;

}
*/
