// Top level function definitions are put
// in a default namespace that is named after the filename

tick_func core
/* Think of `core` as the Orthophosphate
equivalent of `main()`. The `tick_func` part
makes this run every tick. It is conventional to
use exactly one tick function as a single point
of entry. This makes it easier to control the order
that things get executed in. */
{
    |say hello world|; // Literal commands are delimited like so

    obj testObj;
    score $x testObj += constant 1;
    score $y testObj = $x testObj;

    # line comment
    // line comment
    /* comment */|say but this is code|;

    obj notPlayer;
    score @a[type=!player] notPlayer = constant 1;

    reset $x testObj;

    |say you can put
    newlines
    and extra    spaces in your command literals,
    and they get replaced with single spaces
    so that really long commands like this can be
       aligned
          with
    each other,
        nested
            arbitrarily,
    and split between lines|;

    call other_function;
    /* Namespaces aren't required
    when calling another function in the
    same namespace*/

    |function secondary_namespace:a_function_in_a_specified_namespace|;
    /* You can use literals for calls with a namespace. */
}

func other_function
{
    |say other_function called|;

    obj ...timers; /* Name mangling is a macro that
    replaces itself with the name of the Orthophosphate
    project followed by a period. The ellipsis must be
    written without spaces between the dots. There also
    must not be a space between the ellipsis and the name
    being mangled.*/

    |say You can use a literal ellipsis by ensuring it isn't immediately followed by an
    alphanumeric character or an underscore|;
    |say These will name mangle: ...stuff, ...9, ..._thing|;
    |say But these won't: ... stuff, stuff...|;

    /* Name mangling should never be used for anything
    that uses colons for the namespace (equivalently,
    anything defined with curly brace blocks in
    Orthophosphate). It is meant for scoreboards
    and scoreboard tags. */

    // PLANNED FEATUREcounter $T20 ...timers 20;

    // PLANNED FEATURE update $T20 ...timers;
    /* Counters will increment themselves and then
    %= their period (the parameter used in defining them)
    whenever updated. The update should occur
    after the timer is read. */
}

namespace secondary_namespace // You can also declare namespaces explicitly
{
    func a_function_in_a_specified_namespace
    {
        |say running function from secondary_namespace|;
    }
}

/* Welcome to Orthophosphate! */
